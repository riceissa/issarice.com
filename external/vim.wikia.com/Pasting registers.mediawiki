{{TipImported
|id=1303
|previous=1302
|next=1304
|created=2006
|complexity=basic
|author=Mark Woodward
|version=5.7
|rating=15/11
|category1=
|category2=
}}

It is possible to paste the contents of any register into the current buffer or command-line.

==In normal and visual modes==

In general, <code>"{register}p</code> pastes the contents of the register <code>"{register}</code>. For instance, <code>"ap</code> pastes the contents of the register <code>"a</code>.

Just as <code>"+p</code> (or <code>"*p</code>) pastes the contents of the clipboard, other registers can be pasted as well.

Use <code>":p</code> to paste the last command. For example, you might want to save a complex search and replace (<code>:%s///g</code>) that you have just used.

Use <code>"/p</code> to paste the last search.

==In insert and command-line modes==

In insert and command-line modes, you can use <code><C-r></code> to paste the contents of a register. In particular, <code><C-r>"</code> pastes from the default (<code>"</code>) register (so same as <code>p</code> in normal mode). This works with special registers as well, so <code><C-r>+</code> pastes from the clipboard and <code><C-r>/</code> pastes the last search.

Note that because Vim faithfully translates the contents of the clipboard to a buffer in insert and command-line modes, using <code><C-r>+</code> is susceptible to attacks if the contents of the clipboard cannot be fully trusted. This is sometimes called "clipboard hijacking". For instance, if one copies text from a website that contains a literal escape character (i.e. the character with ASCII value 27, ''not'' a representation of the escape character such as <code><Esc></code>), Vim will faithfully switch to normal mode and begin executing normal mode commands. Some browsers hide special characters when displaying a page, so it is not immediately obvious even if one has copied malicious text. Moreover, using clever div-tag positioning, even browsers that display special characters are susceptible to such attacks ([http://thejh.net/misc/website-terminal-copy-paste proof of concept]). It is possible to use <code><C-o>"+p</code> instead, which prevents attacks of this form.

One mapping to avoid such attacks is:
<pre>
inoremap <C-r>+ <C-g>u<C-\><C-o>"+gP
</pre>

This will override the default behavior of <code><C-r>+</code> so that the pasting behavior is like that in normal mode. It first uses <code><C-g>u</code> to break the undo sequence so that the pasting can be undone. Then <code><C-\><C-o></code> temporarily switches to normal mode without moving the cursor. It then accesses the <code>"+</code> register and uses <code>gP</code> instead of the usual <code>P</code> to paste so that the cursor is positioned after what is pasted (just like the default <code><C-r>+</code>). Note that because the clipboard is pasted in "one move" instead of being translated character-by-character (the default behavior), formatting options such as <code>textwidth</code> are not obeyed (use something like <code>gqip</code> to fix the formatting; see {{help|gq}}).

With the above mapping, the default behavior can still be retrieved by waiting a moment after typing <code><C-r></code> (so that Vim gives up on trying to use the custom mapping).

==References==
*{{help|c_CTRL-R}}

==Comments==
This illustrates the hijacking point. Executing the following puts some text in the <code>a</code> register.
<pre>
:let @a = "abc\<Esc>:echo 'gotcha'\<CR>"
</pre>
After that, pressing <code>i</code> to enter insert mode, then typing Ctrl-R <code>a</code> inserts "abc" but then executes the echo command. The Vim procedure to insert the keys literally is to press Ctrl-R twice. That is, type Ctrl-R Ctrl-R <code>a</code> which will insert the escape and newline (carriage return) characters into the text. {{help|i_CTRL-R_CTRL-R}} [[User:JohnBeckett|JohnBeckett]] ([[User talk:JohnBeckett|talk]]) 08:08, May 22, 2016 (UTC)

