{{TipImported
|id=1303
|previous=1302
|next=1304
|created=2006
|complexity=basic
|author=Mark Woodward
|version=5.7
|rating=15/11
|category1=
|category2=
}}

It is possible to paste the contents of any register into the current buffer or command-line.

==In normal and visual modes==

In normal and visual modes, <code>"xp</code> pastes the contents of the register <code>x</code>.

This works with special registers as well: <code>"+p</code> (or <code>"*p</code>) pastes the contents of the clipboard, <code>"/p</code> pastes the last search, and <code>":p</code> pastes the last command. For example, you might want to save a complex search and replace (<code>:%s///g</code>) that you have just used, which you can do by pasting with <code>":p</code>.

==In insert and command-line modes==

In insert and command-line modes, you can use <code><C-R></code> to paste the contents of a register ({{help|i_CTRL-R}}). In particular, <code><C-R>"</code> pastes from the default (unnamed) register, which is analogous to doing <code>p</code> in normal mode.

Note that because Vim faithfully translates the contents of the clipboard to a buffer in insert and command-line modes, using <code><C-R>+</code> is susceptible to attacks if the contents of the clipboard cannot be fully trusted. This is sometimes called "clipboard hijacking". For instance, if one copies text from a website that contains a literal escape character (i.e. the character with ASCII value 27, ''not'' a representation of the escape character such as <code><Esc></code>), Vim will faithfully switch to normal mode and begin executing normal mode commands. Some browsers hide special characters when displaying a page, so it is not immediately obvious even if one has copied malicious text. Moreover, using clever div-tag positioning, even browsers that display special characters are susceptible to such attacks ([http://thejh.net/misc/website-terminal-copy-paste proof of concept]). It is possible to use <code><C-O>"+p</code>, <code><C-R><C-R>+</code> ({{help|i_CTRL-R_CTRL-R}}), and similar commands instead, which prevents attacks of this form.

If one prefers to continue using <code><C-R>+</code> to paste from the system clipboard, ''one'' of the following mappings can be used:

<pre>
" Pick one
inoremap <C-R>+ <C-R><C-R>+
inoremap <C-R>+ <C-R><C-O>+
inoremap <C-R>+ <C-G>u<C-\><C-O>"+gP
inoremap <C-R>+ <C-G>ux<Esc>"=@+.'xy'<CR>gPFx"_2x"_s
exe 'inoremap <script> <C-R>+ <C-G>u' . paste#paste_cmd['i']
</pre>

{| class="wikitable"
! Mapping for <code><C-R>+</code> !! Force characterwise paste? !! Obey <code>textwidth</code>, <code>formatoptions</code>, etc.? !! Contents of <code>".</code> ({{help|quote.}})
|-
| <code><C-R><C-R>+</code>
| Yes
| Yes
| Keeps anything inserted before pasting, puts in the actually pasted text (<code>^V</code>-escaped), and keeps anything inserted after pasting
|-
| <code><C-R><C-O>+</code>
| No
| No
| Keeps anything inserted before pasting, puts in <code>^R^O+</code>, and keeps anything inserted after pasting
|-
| <code><C-G>u<C-\><C-O>"+gP</code>
| No
| No
| Clears anything inserted before pasting, but keeps anything inserted after pasting
|-
| <code><C-R>=<SID>paste1()<CR></code> (source for <code>paste1</code> below)
|
|
|
|-
| <code><C-R><C-O>=<SID>paste2()<CR></code> (source for <code>paste1</code> below)
|
|
|
|-
| <code><C-G>ux<Esc>"=@+.'xy'<CR>gPFx"_2x"_s</code>
| Yes
| No
| Clears anything inserted before pasting, but keeps anything inserted after pasting
|-
| <code>exe ...</code> (see above)
| If <code>has('virtualedit')</code> is false
| No
| Clears anything inserted before pasting, but keeps anything inserted after pasting
|}

For the first mapping, see {{help|i_CTRL-R_CTRL-R}}.

For the second mapping, see {{help|i_CTRL-R_CTRL-O}}.

The third mapping will temporarily switch to normal mode without moving the cursor, and then paste. It first uses <code><C-g>u</code> to break the undo sequence so that the pasting can be undone. Then <code><C-\><C-o></code> temporarily switches to normal mode without moving the cursor. It then accesses the <code>+</code> register and uses <code>gP</code> instead of the usual <code>P</code> to paste so that the cursor is positioned after what is pasted (just like the default <code><C-R>+</code>). Note that because the clipboard is pasted in "one move" instead of being translated character-by-character (the default behavior), formatting options such as <code>textwidth</code> are not obeyed (use something like <code>gqip</code> to fix the formatting; see {{help|gq}}).

The fourth mapping employs the strategy used in [https://github.com/vim/vim/blob/8aba95097305b77d56adce507793e331e895a601/runtime/autoload/paste.vim#L32-L34 <code>paste.vim</code>] (when <code>virtualedit</code> is unavailable). This mapping forces Vim to paste characterwise ({{help|characterwise-register}}) even if the register contains linewise text. This is useful if you always want Vim to start pasting where the cursor was on the line. Select some lines using <code>V</code>, then yank with <code>"+y</code>. Now enter insert mode in the middle of a line. The behavior of the first mapping would be to jump to the previous line and insert the lines there (thus not changing the current line), whereas in most other text editors the text is pasted in the middle of the current line (since most text editors don't distinguish between linewise and characterwise operations).

The fifth mapping is essentially from [https://github.com/vim/vim/blob/6c35beaa11d38fc0c37a3d209295772313b12003/runtime/mswin.vim#L47 <code>mswin.vim</code>]. If Vim was compiled with <code>virtualedit</code>, it takes advantage of this to paste linewise and blockwise text in a more Vim-like manner. If Vim is not compiled with <code>virtualedit</code>, it falls back to the behavior of the previous mapping.

Even with the above mappings, the default behavior can still be retrieved by waiting a moment after typing <code><C-R></code> (so that Vim gives up on trying to use the custom mapping).

<pre>
function! paste1()
  normal! "+gp
  return ''
endfunction
</pre>

<pre>
function! paste2()
  return join(getreg('+', 1, 1), "\n")
endfunction
</pre>

==References==
*{{help|c_CTRL-R}}

==Comments==
This illustrates the hijacking point. Executing the following puts some text in the <code>a</code> register.
<pre>
:let @a = "abc\<Esc>:echo 'gotcha'\<CR>"
</pre>
After that, pressing <code>i</code> to enter insert mode, then typing Ctrl-R <code>a</code> inserts "abc" but then executes the echo command. The Vim procedure to insert the keys literally is to press Ctrl-R twice. That is, type Ctrl-R Ctrl-R <code>a</code> which will insert the escape and newline (carriage return) characters into the text. {{help|i_CTRL-R_CTRL-R}} [[User:JohnBeckett|JohnBeckett]] ([[User talk:JohnBeckett|talk]]) 08:08, May 22, 2016 (UTC)
