{{TipImported
|id=1303
|previous=1302
|next=1304
|created=2006
|complexity=basic
|author=Mark Woodward
|version=5.7
|rating=15/11
|category1=
|category2=
}}

It is possible to paste the contents of any register into the current buffer or command-line.

==In normal and visual modes==

In normal and visual modes, <code>"xp</code> pastes the contents of the register <code>x</code>.

This works with special registers as well: <code>"+p</code> (or <code>"*p</code>) pastes the contents of the clipboard, <code>"/p</code> pastes the last search, and <code>":p</code> pastes the last command. For example, you might want to save a complex search and replace (<code>:%s///g</code>) that you have just used, which you can do by pasting with <code>":p</code>.

==In insert and command-line modes==

In insert and command-line modes, you can use <code><C-R></code> to paste the contents of a register ({{help|i_CTRL-R}}). In particular, <code><C-R>"</code> pastes from the default (unnamed) register, which is analogous to doing <code>p</code> in normal mode.

Note that because Vim faithfully translates the contents of the clipboard to a buffer in insert and command-line modes, using <code><C-R>+</code> is susceptible to attacks if the contents of the clipboard cannot be fully trusted. This is sometimes called "clipboard hijacking". For instance, if one copies text from a website that contains a literal escape character (i.e. the character with ASCII value 27, ''not'' a representation of the escape character such as <code><Esc></code>), Vim will faithfully switch to normal mode and begin executing normal mode commands. Some browsers hide special characters when displaying a page, so it is not immediately obvious even if one has copied malicious text. Moreover, using clever div-tag positioning, even browsers that display special characters are susceptible to such attacks ([http://thejh.net/misc/website-terminal-copy-paste proof of concept]). It is possible to use <code><C-O>"+p</code>, <code><C-R><C-R>+</code> ({{help|i_CTRL-R_CTRL-R}}), and similar commands instead, which prevents attacks of this form.

Suppose you want to map <code><C-V></code> to perform a "safe paste". Then you can use one of the following mappings. Using <code><expr></code> mappings, it is possible to pick specific mapping strategies depending on e.g. the value of <code>'virtualedit'</code>.

<pre>
</pre>

{| class="wikitable"
! Mapping number !! Mapping for <code><C-V></code> !! Force characterwise paste? !! Obey <code>textwidth</code>, <code>formatoptions</code>, etc.? !! Contents of <code>".</code> ({{help|quote.}}) !! Mungs null bytes? !! Works with non-empty <code>'virtualedit'</code>?
|-
| 1
| <code><C-R><C-R>+</code>
| Yes
| Yes
| Keeps anything inserted before pasting, puts in the actually pasted text (<code>^V</code>-escaped), and keeps anything inserted after pasting
| No
| Yes
|-
| 2
| <code><C-R><C-O>+</code>
| No
| No
| Keeps anything inserted before pasting, puts in <code>^R^O+</code>, and keeps anything inserted after pasting
| No
| No; fails on <code>:set ve=insert</code> when pasting beyond the line
|-
| 3
| <code><C-\><C-O>"+gP</code>
| No
| No
| Clears anything inserted before pasting, but keeps anything inserted after pasting
| No
| No; fails on <code>:set ve=insert</code> when pasting beyond the line
|-
| 4
| <code><C-\><C-O>:<C-U>call ...</code> (truncated; see above for full mapping)
| Yes
| No
|
| No
| No; fails on <code>:set ve=insert</code> when pasting beyond the line
|-
| 5
| <code><C-R>=<SID>paste1()<CR></code> (source for <code>paste1</code> above)
| No
| No
|
|
| No
|-
| 6
| <code><C-R>=<SID>paste2()<CR></code> (source for <code>paste2</code> above)
| Yes
| No
|
| No
| No
|-
| 7
| <code><C-R><C-O>=<SID>paste3()<CR></code> (source for <code>paste3</code> above)
|
|
|
|-
| 8
| <code>x<Esc>:<C-U>call ...</code> (truncated; see above for full mapping)
| Yes
| No
|
| No
| Yes
|-
| 9
| <code>x<Esc>"=...</code> (truncated; see above for full mapping)
| Yes
| No
| Clears anything inserted before pasting, but keeps anything inserted after pasting
| Yes
|-
| 10
| <code>exe ...</code> (truncated; see above for full mapping)
| No
| No
| Clears anything inserted before pasting, but keeps anything inserted after pasting
| No
| Yes
|}

All of the mappings can be preceded by <code><C-G>u</code> to break the undo sequence before pasting so that the pasting can be undone.

For mappings that do not obey <code>'textwidth'</code>, <code>'formatoptions'</code>, etc., it is possible to format the text after pasting with <code>gqip</code> (or similar); see {{help|gq}} for more information.

Mappings that force a characterwise paste are useful if you prefer the predictability of always pasting withing surround quote marks. By default, Vim does a linewise paste if a register ends in a newline, causing pasted text to go outside of surrounding quote marks ([https://github.com/riceissa/vim-pasteurize/blob/242ebee3eca6587f8d2ebcf2b6492e5bbc029b0f/doc/pasteurize.txt#L42-L73 example]).

For mapping 1, see {{help|i_CTRL-R_CTRL-R}}.

For mapping 2, see {{help|i_CTRL-R_CTRL-O}}.

Mapping 3 will temporarily switch to normal mode without moving the cursor using {{help|i_CTRL-\_CTRL-O}}, and then paste.

Mapping 9 employs the strategy used in [https://github.com/vim/vim/blob/8aba95097305b77d56adce507793e331e895a601/runtime/autoload/paste.vim#L32-L34 <code>paste.vim</code>] (when <code>'virtualedit'</code> is unavailable).

Mapping 10 is essentially from [https://github.com/vim/vim/blob/6c35beaa11d38fc0c37a3d209295772313b12003/runtime/mswin.vim#L47 <code>mswin.vim</code>]. If Vim was compiled with <code>virtualedit</code>, it takes advantage of this to paste linewise and blockwise text in a more Vim-like manner. If Vim is not compiled with <code>virtualedit</code>, it falls back to the behavior of mapping 9.

Even with the above mappings, the default behavior can still be retrieved by waiting a moment after typing <code><C-R></code> (so that Vim gives up on trying to use the custom mapping).

* TODO mention how even with <silent>, some of these will show blinking characters when :set list is on.
* TODO check for whether it works on an error line with ALE turned on?

==References==
*{{help|c_CTRL-R}}

==Comments==
This illustrates the hijacking point. Executing the following puts some text in the <code>a</code> register.
<pre>
:let @a = "abc\<Esc>:echo 'gotcha'\<CR>"
</pre>
After that, pressing <code>i</code> to enter insert mode, then typing Ctrl-R <code>a</code> inserts "abc" but then executes the echo command. The Vim procedure to insert the keys literally is to press Ctrl-R twice. That is, type Ctrl-R Ctrl-R <code>a</code> which will insert the escape and newline (carriage return) characters into the text. {{help|i_CTRL-R_CTRL-R}} [[User:JohnBeckett|JohnBeckett]] ([[User talk:JohnBeckett|talk]]) 08:08, May 22, 2016 (UTC)
