This guide explores how to use Facebook's graph search syntax to find posts, comments, people, and other entities on Facebook. This guide emphasizes showing ''how'' to build your own queries rather than just giving examples of queries or giving an exhaustive list of search options.

==Steps==
===Consider reviewing the mathematical prerequisites===
# Know what the mathematical prerequisites are. The main mathematical prerequisites for developing fluency with graph search are [[wikipedia:Boolean_algebra|Boolean algebra]], [[wikipedia:Naive_set_theory|naive set theory]], [[wikipedia:Reverse_Polish_notation|reverse Polish notation]], and [[wikipedia:Arity|operator arity]]. It is possible to work with graph search even without an understanding of these topics. For instance, you can use some of the existing interfaces listed in the "Explore existing interfaces" section below, modify example searches, or stick to very simple queries. Thus, this section can be skipped on a first read. Nonetheless, having a solid understanding of these topics will ensure you aren't making any mistakes in writing queries, and will allow you to craft tricky queries.
# Understand Boolean algebra. [[wikipedia:Boolean_algebra|Boolean algebra]] is an abstract way of formalizing logical notions like "and", "or", and "not". Many search engines incorporate Boolean algebra. For instance, Google has an advanced search page<ref>[https://www.google.com/advanced_search "Google Advanced Search"]. Google. Retrieved September 30, 2018.</ref> where one can find a box to search all of the given words (Boolean "and"), a box to search any of the given words (Boolean "or"), and a box for searching none of the given words (Boolean "not").<br /><br />Facebook graph search incorporates ''parts'' of Boolean algebra. In particular, it has a family of ''intersect operators'' (corresponding to a Boolean "and") and a family of ''union operators'' (corresponding to a Boolean "or"). However, it is lacking a notion of negation, so there is no operator corresponding to the Boolean "not". Concretely, this means you cannot search for things like "all posts not written by Mark Zuckerberg".
# Understand naive set theory. [[wikipedia:Naive_set_theory|Naive set theory]] is an instance of a Boolean algebra, where the Boolean "and" is called [[wikipedia:Intersection_(set_theory)|''intersection'']], the Boolean "or" is called [[wikipedia:Union_(set_theory)|''union'']], and the Boolean "not" is called [[wikipedia:Complement_(set_theory)|''set complement'']].<br /><br />The key point is this: in Facebook graph search, the operands will all be ''conditions that specify sets''. For instance "posts liked by Dustin Moskovitz" specifies the collection (set) of all posts on Facebook that have been "liked" by Dustin Moskovitz. Then, using the union and intersect operators (remember, we have part of a Boolean algebra), we can form new sets like "posts written by Mark Zuckerberg that were liked by Dustin Moskovitz", i.e. the ''intersection'' of "posts written by Mark Zuckerberg" and "posts that were liked by Dustin Moskovitz".<br /><br />One thing to be careful about is that the English word "and" can sometimes mean "union", for instance when one says "the set of all cats and dogs" (this is the union of "the set of cats" and "the set of dogs", rather than the intersection). There are many similar subtleties in mathematical logic; for more information see [[wikipedia:Timothy_Gowers|Tim Gowers]]'s blog post on logical connectives<ref>Tim Gowers. [https://gowers.wordpress.com/2011/09/25/basic-logic-connectives-and-and-or/ "Basic logic — connectives — AND and OR"]. ''Gowers's Weblog''. September 25, 2011. Retrieved September 30, 2018.</ref> as well as [[wikipedia:Terence_Tao|Terence Tao]]'s lecture notes on mathematical logic<ref>Terence Tao. [http://www.math.ucla.edu/~tao/resource/general/131ah.1.03w/logic.pdf "Supplemental handout - The basics of mathematical logic"]. Retrieved September 30, 2018.</ref> and set theory.<ref>Terence Tao. [http://www.math.ucla.edu/~tao/resource/general/131ah.1.03w/sets.pdf "Supplemental handout - Naive set theory"]. Retrieved September 30, 2018.</ref>
# Understand reverse Polish (a.k.a. postfix) notation. [[wikipedia:Reverse_Polish_notation|Reverse Polish notation]] specifies a syntax for how operators and operands are written. Usually, we use ''infix notation'' to describe arithmetic, for example 3 × 4 + 5 = 17 and 3 + 4 × 5 = 23. To distinguish between the two, we rely on ''operator precedence'' (e.g. multiplication has higher precedence than addition). At other times, we rely on parentheses to group operations, for example (8 ÷ 4) ÷ 2 = 1 and 8 ÷ (4 ÷ 2) = 4. In contrast, both ''prefix'' and ''postfix'' notations rely only on the order in which the operands and operators are written (and the arity of the operators). For instance, to write 3 × 4 + 5 in prefix (a.k.a. Polish) notation, one writes + × 3 4 5, where the implicit grouping is (+ (× 3 4) 5), and to write 3 + 4 × 5 one writes × + 3 4 5, where the implicit grouping is (× (+ 3 4) 5). In postfix (a.k.a. reverse Polish) notation, the operator comes after the operands, so to write 3 × 4 + 5 one writes 3 4 × 5 +, where the implicit grouping is ((3 4 ×) 5 +) and to write 3 + 4 × 5 one writes 3 4 + 5 ×, where the implicit grouping is ((3 4 +) 5 ×). Note that in prefix and postfix notations, there is no concept of operator precedence and no requirement to use parentheses: whatever operator is in the right place "gobbles up" the (two) arguments following it (in prefix notation) or in front of it (in postfix notation).<br /><br />The relevance of reverse Polish notation to Facebook graph search is this: in Facebook graph search, queries are written in postfix notation, where the operators are called "intersect" and "union" (along with variants of these). So to search for (''A'' and ''B'') or ''C'', one types essentially ''A'' ''B'' intersect ''C'' union.
# Understand operator arity. The [[wikipedia:Arity|arity]] of an operator is the number of arguments it uses up. For instance, both addition and multiplication have arity two (also called binary) because they both use up two arguments. In contrast, the [[wikipedia:Ternary_operator|ternary operator]] in many programming languages takes three arguments (i.e. has arity 3 or is ternary): a boolean and two expressions, and outputs the first expression if the boolean is true and the second expression if the boolean is false.<br /><br />The relevance of arity to Facebook graph search is this: in Facebook graph search, there isn't just a single union and single intersect operator. Rather, each is a family of operators, union, union-2, union-3, union-4, etc., and intersect, intersect-2, intersect-3, intersect-4, etc. Each "-''n''" variant has arity ''n''. For example, union-3 takes three arguments ''A'', ''B'', ''C'', and produces the union of all of them; in other words, (''A'' ''B'' ''C'' union-3) = A ∪ B ∪ C (remember, we are using postfix notation!). The special union and intersect operators (without a number) have variable arity: they use up ''all'' the arguments coming before them. For instance, (''A'' ''B'' ''C'' union) = A ∪ B ∪ C. Thus, there are multiple ways to write the same query.<ref>Mike. [https://thebalazs.com/2013/08/11/the_facebook_sourcing_tutorial_part1/#comment-1504 Comment on "The Facebook #Sourcing Tutorial Part1"]. ''Balazs & the Magic Sourcing World''. March 24, 2015.</ref>

===Find the ID number of an entity===
# Understand what an entity ID number is. Each entity on Facebook (such as a person or organization) has a unique ID number associated with it. To create the most useful queries involving such entities, you will need to find the Facebook ID of those entities.
# Find the ID number of a person. To get the Facebook ID of a person, you can use https://stalkscan.com/ or https://findmyfbid.com/ or right click on a user's profile picture and select "Copy link address" ("Copy link location" in some browsers) and check the value of <code>referrer_profile_id</code> or <code>profile_id</code>.
# Find the ID number of an organization. To get the Facebook ID of an organization, go to the organization page, right click the organization photo, and select "Copy link address" ("Copy link location" in some browsers). Then the organization's ID number is the first number after <code>facebook.com</code>.

===Understand the general syntax of a query===
# Understand the general pattern of a query. The general syntax is <code><nowiki>https://www.facebook.com/search/</nowiki></code> followed by some sequence of ''atomic conditions'' and ''operators'', so that the resulting URL might look like <code><nowiki>https://www.facebook.com/search/A/B/operator₁/C/operator₂</nowiki></code>, where ''A'', ''B'', and ''C'' are atomic conditions. Each atomic condition specifies a simple set such as the set of all posts written by Mark Zuckerberg. (More on atomic conditions in the next section.) Each operator is one of union, union-2, union-3, etc., or one of intersect, intersect-2, intersect-3, etc.
# Understand the grouping of the operators. As explained in the mathematical prerequisites section, Facebook graph search uses a postfix notation. This means that as soon as an operator is seen, it "gobbles up" a certain number of arguments appearing before it (which varies based on the operator's arity, another concept explained in the mathematical prerequisites section). For instance, a sequence like ''A''/''B''/''C''/union-2/''D''/intersect-3 groups into (''A'' (''B'' ''C'' union-2) ''D'' intersect-3), which means the same thing as ''A'' ∩ (''B'' ∪ ''C'') ∩ ''D''. The special union and intersect operators without a number will gobble up ''all'' the arguments preceding it, so the previous query could also have been written ''A''/''B''/''C''/union-2/''D''/intersect or ''B''/''C''/union/''A''/''D''/intersect.
# Consider practicing the query pattern. The following are some exercises (answers given in black boxes; highlight to see the text):
#* What does the query ''A''/''B''/''C''/union/''D''/intersect mean? (answer: <span style="background-color: black; color: black;">(''A'' ∪ ''B'' ∪ ''C'') ∩ D</span>)
#* What does the query ''A''/''B''/''C''/''D''/union-2/intersect/''E''/union mean? (answer: <span style="background-color: black; color: black;">(''A'' ∩ ''B'' ∩ (''C'' ∪ ''D'')) ∪ ''E''</span>)
#* How would you write the query ''A'' or (''B'' and ''C'')? (answer: <span style="background-color: black; color: black;">''A''/''B''/''C''/intersect-2/union works, as does ''B''/''C''/intersect/''A''/union</span>)
#* How would you write the query (''A'' and ''B'') or (''C'' and ''D'')? (answer: <span style="background-color: black; color: black;">''A''/''B''/intersect-2/''C''/''D''/intersect-2/union-2 works, as does ''A''/''B''/intersect/''C''/''D''/intersect-2/union</span>)

===Find the atomic conditions===
# Understand what atomic conditions are. Atomic conditions specify simple sets, such as "all posts written by Mark Zuckerberg", "all posts about malaria", or "all people who have worked at the WHO".<br/><br/>Each different type of entity (e.g. posts, people) has its own atomic conditions.<br/><br/>Below, we won't give an exhaustive list of atomic conditions, since such lists already exist. Instead, we will teach you how to figure out how to write your desired query.<br/><br/>Note that atomic conditions can contain a slash (<code>/</code>), even though a slash is also used to separate atomic conditions from each other and from operators.
# Keep in mind some of the atomic conditions for posts. Some of the most useful ones are:
#* <code>str/KEYWORD/stories-keyword</code>: post contains <code>KEYWORD</code>; for example <code>str/malaria/stories-keyword</code> finds all posts containing the word "malaria"
#* <code>str/GROUP%20NAME/stories-keyword</code>: search for posts in <code>GROUP NAME</code>; note that spaces must be entered as a space or as the percent-encoded <code>%20</code> and that this will also find posts that mention the group name; for example <code>str/open%20borders%20action%20group/stories-keyword</code> finds all posts in the Open Borders Action Group
#* <code>FACEBOOKID/stories-by</code>: post by user with ID <code>FACEBOOKID</code>; for example <code>4/stories-by</code> finds all posts by Mark Zuckerberg (who has the Facebook ID of 4)
#* <code>FACEBOOKID/stories-liked</code>: post liked by user with ID <code>FACEBOOKID</code>; for example <code>4/stories-liked</code> finds all posts liked by Mark Zuckerberg (who has the Facebook ID of 4)
#* <code>FACEBOOKID/stories-commented</code>: post commented on by user with ID <code>FACEBOOKID</code>; for example <code>4/stories-commented</code> finds all posts commented on by Mark Zuckerberg (who has the Facebook ID of 4)
#* <code>YYYY/date/stories</code>: post made during the year <code>YYYY</code>; for example, <code>2017/date/stories</code> finds all posts made in 2017
#* <code>MON/YYYY/date-2/stories</code>: post made during the month <code>MON</code> of year <code>YYYY</code>; for example <code>sep/2017/date-2/stories</code> finds all posts made during September 2017
#* <code>DD/MON/YYYY/date-3/stories</code>: post made during the day <code>DD</code> of month <code>MON</code> of year <code>YYYY</code>; for example <code>05/sep/2017/date-3/stories</code> finds all posts made on September 5, 2017
# Keep in mind some of the atomic conditions for people. Some of the most useful ones are:
#* <code>FACEBOOKID/employees/ever</code>
# Know where to find more complete lists of atomic conditions. Below are some webpages or documents that give a more complete listing of atomic conditions:
#* "Facebook Graph Search Operators"<ref>Paul Myers. [http://researchclinic.net/facebook/facebook.html "Facebook Graph Search Operators"]. 2018. Research Clinic. Retrieved October 1, 2018.</ref>
#* "Facebook Graph search links"<ref>[https://www.americanbar.org/content/dam/aba/administrative/child_law/conf/Social%20Media%20Graph%20Search%20handout.authcheckdam.pdf "Facebook Graph search links"]. Retrieved October 1, 2018.</ref>
#* "The Facebook #Sourcing Tutorial Part 2"<ref>Balazs Paroczay. [https://thebalazs.com/2014/12/30/the-facebook-sourcing-tutorial-part-2/ "The Facebook #Sourcing Tutorial Part 2"]. December 30, 2014. ''Balazs & the Magic Sourcing World''. Retrieved October 1, 2018.</ref>
#* "The hidden language of Facebook Graph Search - keywords without explanation"<ref>Ákos Bardóczi. [https://github.com/bardoczi/facebook-graph-search "The hidden language of Facebook Graph Search - keywords without explanation"]. April 2, 2018. ''GitHub''. Retrieved October 1, 2018.</ref>
#* "Facebook Graph Search Important Changes" (2018).<ref>Irina Shamaeva. [https://booleanstrings.com/2018/06/25/facebook-graph-search-important-changes/ "Facebook Graph Search Important Changes"]. June 25, 2018. ''Boolean Strings''. Retrieved October 1, 2018.</ref>

===Put together the query===
# Use the general pattern and atomic conditions to write your query. Now that you know the general syntax of a query and have some examples of useful atomic conditions, you can put everything together into an actual query. Probably the easiest way to do this is to write out the query informally in infix notation, then convert it to postfix notation, and finally replace each informal condition by its corresponding atomic condition and the spaces and parentheses by slashes. Here is an example of this process:
#* Suppose we want to find all posts by either Mark Zuckerberg or Dustin Moskovitz that were made in 2015. We write this in infix notation as: (by-Mark-Zuckerberg or by-Dustin-Moskovitz) and made-in-2015. Now we convert to postfix as: ((by-Mark-Zuckerberg by-Dustin-Moskovitz union) made-in-2015 intersect). Finally, we replace the informal conditions by the corresponding atomic conditions and the spaces and parentheses by slashes: <code>4/stories-by/6/stories-by/union/2015/date/stories/intersect</code>.
# Look at some example queries. Here are some example queries that give some idea of what is possible. Using the concepts discussed above, you can craft much more complicated queries.
#* https://www.facebook.com/search/str/harvard/stories-keyword/4/stories-by/intersect - posts about "Harvard" that are by Mark Zuckerberg
#* https://www.facebook.com/search/4/stories-commented/6/stories-commented/intersect - posts that are commented on by both Mark Zuckerberg and Dustin Moskovitz
#* https://www.facebook.com/search/4/stories-liked/6/stories-liked/intersect - posts liked by both Mark Zuckerberg and Dustin Moskovitz
#* https://www.facebook.com/search/154163327962392/employees/ever - people who have worked at the World Health Organization
#* https://www.facebook.com/search/154163327962392/employees/ever/11309713071/employees/ever/intersect - people who have worked at both the World Health Organization and the Gates Foundation
#* https://www.facebook.com/search/11309713071/employees/ever/pages-liked/book/pages/intersect/ - books liked by people who have worked at the Gates Foundation
#* https://www.facebook.com/search/11/sep/2017/date-3/stories - so this is kind of a hack to "go back in time" of your newsfeed for a particular day
#* https://www.facebook.com/search/4/stories-commented/2010/date/stories/intersect/intersect - posts from 2010 that are commented on by Mark Zuckerberg (the comment doesn't have to be from 2010)
#* https://www.facebook.com/search/4/stories-commented/2009/before/stories/intersect - posts from before 2009 that have been commented on by Mark Zuckerberg (the comment doesn't have to be from before 2009)
#* https://www.facebook.com/search/4/stories-liked/2011/date/stories/intersect - posts from 2011 that have been liked by Mark Zuckerberg
#* https://www.facebook.com/search/4/stories-tagged/str/cupcake/stories-keyword/2011/date/stories/intersect - posts from 2011 that are about cupcakes and where Mark Zuckerberg is tagged
#* https://www.facebook.com/search/4/stories-by/2011/date/stories/intersect - Mark Zuckerberg's posts from 2011

===Explore existing interfaces===
# Understand what a web application interface can do for you. Several web application interfaces exist to make crafting graph search queries easier. In a web application interface, you type words or numbers into boxes or select options, then hit "Submit" to get your search results. This means you don't need to know anything about the graph search query syntax or how to write atomic conditions. This makes such interfaces useful for quickly getting started. On the other hand, none of the existing interfaces are very advanced, in the sense of being able to craft arbitrary queries with arbitrary conditions.
# Know some of the more well-known and feature-rich interfaces. Some of the more well-known and feature-rich interfaces are:
#* Facebook Scanner (stalkscan.com)<ref>[https://stalkscan.com/ Facebook Scanner]. Retrieved October 1, 2018.</ref>
#* Facebook Search Tool by IntelTechniques.com<ref>[https://inteltechniques.com/osint/facebook.html Facebook Search Tool by IntelTechniques.com]. Retrieved October 1, 2018.</ref>
#* Facebook Graph Search Generator (graph.tips)<ref>Henk van Ess; Tormund Gerhardsen. [http://graph.tips/ Facebook Graph Search Generator]. Retrieved October 1, 2018.</ref>
# Consider finding other interfaces. If you don't like any of the interfaces listed above, consider looking for others using search terms like "Facebook graph search tool".

==Warnings==
* Facebook occasionally changes the queries that work, so some of the specific details in this tutorial may stop working in the future.
* In some queries, Facebook will try to show the English translation of the query in the search box and page title; for example <code>4/stories-by/6/stories-commented/intersect</code> has the translation "Mark Zuckerberg's posts commented on by Dustin Moskovitz". In simples cases this English translation is usually correct, but in more complicated cases, Facebook's English translation is sometimes badly wrong. In botched queries such as <code>6/stories-commented/union/union/4/stories-by/intersect</code>, the translation may sound strange ("Mark Zuckerberg's posts that are posts or are commented on by Dustin Moskovitz or are posts"). In even more complicated cases, Facebook will give up and not show an English translation. In such cases, don't worry! The query is working but the translation is just unreliable.

==Related wikiHows==
* [[Use the Facebook Graph Search]]
* [[Find a Friend's Comments on Facebook]]

== Sources and Citations ==
{{reflist}}
__PARTS__
