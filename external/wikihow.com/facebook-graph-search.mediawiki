This guide explores how to use Facebook's graph search syntax to find posts, comments, people, and other entities on Facebook.

==Steps==
===Consider reviewing the mathematical prerequisites===
# Know what the mathematical prerequisites are. The main mathematical prerequisites for developing fluency with graph search are [[wikipedia:Boolean_algebra|Boolean algebra]], [[wikipedia:Naive_set_theory|naive set theory]], [[wikipedia:Reverse_Polish_notation|reverse Polish notation]], and [[wikipedia:Arity|operator arity]]. It is possible to work with graph search even without an understanding of these topics (for instance, you can use some of the existing interfaces listed in the "Explore existing interfaces" step below, modify example searches, or stick to very simple queries), having a solid understanding of these topics will ensure you aren't making any mistakes in writing queries.
# Understand Boolean algebra. [[wikipedia:Boolean_algebra|Boolean algebra]] is an abstract way of formalizing logical notions like "and", "or", and "not". Many search engines incorporate Boolean algebra. For instance, Google has an advanced search page<ref>[https://www.google.com/advanced_search "Google Advanced Search"]. Google. Retrieved September 30, 2018.</ref> where one can find a box to search all of the given words (Boolean "and"), a box to search any of the given words (Boolean "or"), and a box for searching none of the given words (Boolean "not").<br /><br />Facebook graph search incorporates ''parts'' of Boolean algebra. In particular, it has a family of ''intersect operators'' (corresponding to a Boolean "and") and a family of ''union operators'' (corresponding to a Boolean "or"). However, it is lacking a notion of negation, so there is no operator corresponding to the Boolean "not". In particular, this means you cannot search for things like "all posts not written by John Smith".
# Understand naive set theory. [[wikipedia:Naive_set_theory|Naive set theory]] is an instance of a Boolean algebra, where the Boolean "and" is called [[wikipedia:Intersection_(set_theory)|''intersection'']], the Boolean "or" is called [[wikipedia:Union_(set_theory)|''union'']], and the Boolean "not" is called [[wikipedia:Complement_(set_theory)|''set complement'']].
# Understand reverse Polish (postfix) notation. [[wikipedia:Reverse_Polish_notation|Reverse Polish notation]] specifies a syntax for how operators and operands are written. Usually, we use ''infix notation'' to describe arithmetic, for example 3 × 4 + 5 = 17 and 3 + 4 × 5 = 23. To distinguish between the two, we rely on ''operator precedence'' (e.g. multiplication has higher precedence than addition). At other times, we rely on parentheses to group operations, for example (8 ÷ 4) ÷ 2 = 1 and 8 ÷ (4 ÷ 2) = 4. In contrast, both ''prefix'' and ''postfix'' notations rely only on the order in which the operands and operators are written (and the arity of the operators). For instance, to write 3 × 4 + 5 in prefix notation, one writes + × 3 4 5, where the implicit grouping is (+ (× 3 4) 5), and to write 3 + 4 × 5 one writes × + 3 4 5, where the implicit grouping is (× (+ 3 4) 5). In postfix or reverse Polish notation, the operator comes after the operands, so to write 3 × 4 + 5 one writes 3 4 × 5 +, where the implicit grouping is ((3 4 ×) 5 +) and to write 3 + 4 × 5 one writes 3 4 + 5 ×, where the implicit grouping is ((3 4 +) 5 ×). Note that in prefix and postfix notations, there is no concept of operator precedence and no requirement to use parentheses: whatever operator is in the right place "gobbles up" the (two) arguments following it (in prefix notation) or in front of it (in postfix notation).<br /><br />The relevance of reverse Polish notation to Facebook graph search is this: in Facebook graph search, queries are written in postfix notation, where the operators are called "intersect" and "union". So to search for (condition₁ and condition₂) or condition₃, one types essentially condition₁ condition₂ intersect condition₃ union.
# Understand operator arity. The [[wikipedia:Arity|arity]] of an operator is the number of arguments it uses up. For instance, both addition and multiplication have arity two (also called binary) because they both use up two arguments. In contrast, the [[wikipedia:Ternary_operator|ternary operator]] in many programming languages takes three arguments: a boolean and two expressions, and outputs the first expression if the boolean is true and the second expression if the boolean is false.<br /><br />The relevance of arity to Facebook graph search is this: in Facebook graph search, there isn't just a single union and single intersect operator. Rather, each is a family of operators, union, union-2, union-3, union-4, etc., and intersect, intersect-2, intersect-3, intersect-4, etc. Each "-''n''" variant has arity ''n''. For example, union-3 takes three arguments ''A'', ''B'', ''C'', and produces the union of all of them; in other words, (''A'' ''B'' ''C'' union-3) = A ∪ B ∪ C (remember, we are using postfix notation!). The special union and intersect operators (without a number) have variable arity: they use up ''all'' the arguments coming before them. For instance, (''A'' ''B'' ''C'' union) = A ∪ B ∪ C. Thus, there are multiple ways to write the same query.<ref>Mike. [https://thebalazs.com/2013/08/11/the_facebook_sourcing_tutorial_part1/#comment-1504 Comment on "The Facebook #Sourcing Tutorial Part1"]. ''Balazs & the Magic Sourcing World''. March 24, 2015.</ref>

===Find the ID number of an entity===
To create the most useful queries involving people and organizations, you will need to find the Facebook ID of those entities.

To get the Facebook ID of a person, you can use https://stalkscan.com/ or https://findmyfbid.com/ or right click on a user's profile picture and select "Copy link address" and check the value of <code>referrer_profile_id</code> or <code>profile_id</code>.

To get the Facebook ID of an organization, go to the organization page, right click the organization photo, and select "Copy link address". Then the organization's ID number is the first number after <code>facebook.com</code>.

===Understand the general syntax of a query===
===Find the atomic conditions===
===Explore existing interfaces===
Several web application interfaces exist to make crafting graph search queries easier. However, note that none of these are very advanced, in the sense of being able to craft arbitrary queries with arbitrary conditions.

* https://stalkscan.com/
* https://inteltechniques.com/osint/facebook.html


==Related wikiHows==
* [[Use the Facebook Graph Search]]
* [[Find a Friend's Comments on Facebook]]

== Sources and Citations ==
{{reflist}}
__PARTS__
