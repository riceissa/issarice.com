Possible list of things to write about:

- wordpress
- high school
- peter thiel, elon musk, travis kalanick, jeff bezos, mark zuckerberg
- bertrand russell
- dating and relationships
- the value of books
- how to write
- gender (evo bio)
- feminism (logical argument)
- nice guys
- race
- libertarianism
- communism (Marxians)
- neoreactionaries
- Freud
- the difference between "knowing about a topic" and "knowing what experts/the mainstream think about a topic"
- Japanese literature
    - oe kenzaburo (UC Berkeley lecture on A Personal Matter by John Wallace(?))

NEW:

- make side bar responsive: as gwern notes, there are TWO kinds of
  navigational information. one is site-specific, so home, about, feed,
  comment, and website source. the other is page-specific, so the table
  of contents, permalink to page, and page source. the site-specific
  things can stay at the top (where it has always been), but having the
  TOC and other page-specific stuff in the same place or in the page is
  less useful. it's hard to find things in the page and easy to get lost
  from the overall structure of the page when there are many headings.
  one way is to make each page small and manageable, but as someone who
  suffers from low working memory, shouldn't i be helping my readers by
  always presenting the overall structure of the page to the side? I
  like the design in
  <http://www.stephendiehl.com/posts/essential_compilers.html>, but
  unfortunately that page displays the *global* (i.e. site-specific)
  stuff on the side, not page-specific stuff. also some browsers like
  elinks and firefox with vimfx can easily go to the top/bottom of
  pages, but i have to remember that most people aren't as obsessed
  about customizing browsers, so it would be good to have an easier way
  to navigate a page.

    The sidebar should also be responsive, in that when the width
    becomes too small, the display "squishes" into the original (i.e.
    current) form.

    this is a distinction gwern recently made as well, though i think
    his solution is suboptimal (since the TOC doesn't stick).

    something like the following works, after some quick hacking. of
    course, more adjustments will become necessary. note that this is a
    completely javascript-free solution.

    ```
    @media (min-width: 48em) {
        div#TOC {
            position: fixed;
            left: 0;
            top: 10px;
            bottom: 0;
            overflow: auto;
        }

        h2#TOCheading {
            border-bottom: none;
        }
    }
    ```

- try to UNLICENSE/public domain as much of the content as possible ... there really isn't any reason to continue to add useless restrictions (as long as nobody tries to sue me)
- doing `import html` or `from html import escape` breaks the compilation process at the step of applying the pandoc filter (see commit `ef8e9b9d1a534150a7146f680a3778eab6f26a6b`)
- decide what to do about the problem of adding multiple languages/other parameters.
  right now the structure is flat, i.e. everything comes after issarice.com/ . But what if we have another language, and want to have pagename1 for both languages (maybe they are even the exact same word in each language).
  One solution is subdomains, but this is a bit tricky if one wants to have a locally-generated site. We could also do something like issarice.com/wiki/en/pagename1 for the english page, but then this breaks compatibility with what already exists. One solution is to have all the main pages flat (which are english for the time being), but then have a few "blacklisted" pages that cannot be created. This is already the case with "tags", "images" (though this one isn't really true, since images are added to the flat issarice.com/ ), "static".
  We could then add to this blacklist e.g. single alpha characters a..z, which we can use for further things.
  Like 'c' could stand for "content", so we could then just have issarice.com/c/wiki/en/pagename1, for instance. Then still the most obvious place to go (which is issarice.com/pagename1) will work, while the more "logical" placement will also work.
- write a "plugin feature" so it's easier to add things later??
- go through generator.py, metadata.py, and commands.py (and maybe also
  tag_ontology.py) to document code.
- use classes instead of purely procedural stuff (do this slowly)

- efficiency?? -- right now, it takes about 30 seconds to process all
  files. It used to be that generator.py took 9 seconds while hakyll
  took about 6 (+4 for compiling site.hs). But generator.py does a lot
  more tag processing, so maybe speed isn't really a concern. Now
  generator.py makes a sitemap as well.  30 *is* slow, but the --files
  flag allows for partial compilation (something I didn't see in Jekyll
  or Hakyll), which means I can quickly check the output of the file I
  am editing.  I do want to work on this though to make it run faster.

OLD:

- figure out why LaTeX code blocks aren't highlighting; i think this is just because pandoc only highlights comments for LaTeX, for some reason
- import remaining pages from github pages site. & add more notes files.
- on tags, show the number of items in each tag in parentheses
